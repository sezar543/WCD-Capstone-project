import os
# import boto3
import sys  # Add this line to fix the error
import json
# import tensorflow as tf
from io import BytesIO
from PIL import Image
from PIL import ImageFile
ImageFile.LOAD_TRUNCATED_IMAGES = True

import numpy as np

from botocore.exceptions import ClientError

from my_lambda_function import lambda_handler

# Create a mock event. Adjust this according to your Lambda function's expected event structure.
event = {
    "rawPath": "/pred",
    "httpMethod": "POST",
    "headers": {
      "Content-Type": "application/json"
    },
    "body": "{\"key\": \"value\"}"
}
event2 = {
    'rawPath': '/pred',
    'body': json.dumps({
        'input': {
            'ImageData': ''
        }
    })
}

# Call the lambda function directly
response = lambda_handler(event2, None)

# Print the response
print(response)


