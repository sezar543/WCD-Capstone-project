name: Build and Deploy lambda

on:
  workflow_dispatch:
    inputs:
      push_to_ecr:
        description: 'Push the Docker image to AWS ECR'
        required: true
        default: 'false'
        type: string
      dummy_image:
        description: 'Build and deploy a dummy Docker image for testing'
        required: true
        default: 'false'
        type: string

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      MLFLOW_TRACKING_URI: sqlite:///app/deploy_mlflow/mlruns/mlflow.db
      AWS_REGION: ${{ secrets.AWS_REGION }}
      ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}

    steps:
    # Step 1: Checkout the code
    - name: Checkout code
      uses: actions/checkout@v2

    # Step 2: Log in to Docker Hub (optional if not needed for this workflow)
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    # Step 3: Set up Docker
    - name: Set up Docker
      run: |
        docker --version

    # Step 3: Start a Local Docker Registry
    - name: Start Local Docker Registry
      run: |
        docker run -d -p 5000:5000 --name local-registry registry:2

    # Step 4: Configure AWS Credentials
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    # Step 5: Log in to Amazon ECR
    - name: Log in to Amazon ECR
      run: |
        aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY

    # Step 6: Build the Docker image (Dummy or Application)
    - name: Build Docker Image
      run: |
        if [ "${{ github.event.inputs.dummy_image }}" == "true" ]; then
          echo "Building Dummy Image..."
          echo -e "FROM alpine:latest\nCMD [\"echo\", \"Dummy image for testing\"]" > Dockerfile.Dummy
          docker build -t image-classification-dummy:latest -f Dockerfile.Dummy .
          docker tag image-classification-dummy:latest $ECR_REGISTRY/dummy-image:latest
        else
          echo "Building Application Image..."
          docker build -t image-classification-app:latest -f ./deploy_lambda/Dockerfile.Lambda .
          docker tag image-classification-app:latest $ECR_REGISTRY/image-classification-app:latest

    # Step 7: Push the image to Amazon ECR
    - name: Push Docker Image to Amazon ECR
      run: |
        if [ "${{ github.event.inputs.dummy_image }}" == "true" ]; then
          docker push $ECR_REGISTRY/dummy-image:latest
        else
          docker push $ECR_REGISTRY/image-classification-app:latest

    # Step 8: Update the Lambda function
    - name: Update Lambda Function
      if: github.event.inputs.push_to_ecr == 'true'
      run: |
        if [ "${{ github.event.inputs.dummy_image }}" == "true" ]; then
          aws lambda update-function-code \
            --function-name image-classification-model \
            --image-uri $ECR_REGISTRY/dummy-image:latest \
            --region $AWS_REGION
        else
          aws lambda update-function-code \
            --function-name image-classification-model \
            --image-uri $ECR_REGISTRY/image-classification-app:latest \
            --region $AWS_REGION
