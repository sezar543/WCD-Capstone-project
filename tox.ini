# Tox is a generic virtualenv management and test command line tool. Its goal is to
# standardize testing in Python. We will be using it extensively in this course.

# Using Tox we can (on multiple operating systems):
# + Eliminate PYTHONPATH challenges when running scripts/tests
# + Eliminate virtualenv setup confusion
# + Streamline steps such as model training, model publishing


[tox]
; min_version = 4
min_version = 3
envlist = test_package, checks
skipsdist = True

[testenv]
basepython = python
install_command = pip install {opts} {packages}
allowlist_externals = train
setenv =
	PYTHONPATH=.
	PYTHONHASHSEED=0

[testenv:test_package]
envdir = {toxworkdir}/test_package
skip_install = true
recreate = False  # Do not recreate the environment each time
deps =
	-r{toxinidir}/requirements/test_requirements.txt
commands=
	python nn_model/train_pipeline.py --no-plot
	pytest \
	-s \
	-vv \
	{posargs:tests/}

[testenv:train]
envdir = {toxworkdir}/test_package
skip_install = true
recreate = False  # Do not recreate the environment each time
; deps =
;      {[testenv:test_package]deps}
; commands=
; 	python nn_model/train_pipeline.py
deps =
    -r requirements/test_requirements.txt
	mlflow
commands =
    ; python nn_model/train_pipeline.py
	python nn_model\train_pipeline.py --no-plot 

[testenv:checks]
envdir = {toxworkdir}/checks
deps =
	-r{toxinidir}/requirements/typing_requirements.txt
commands =
	flake8 nn_model tests
	isort nn_model tests
	{posargs:mypy nn_model}


[flake8]
exclude = .git,env
max-line-length = 100